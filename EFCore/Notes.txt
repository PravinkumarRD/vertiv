Why Entity Framework Core?

EF Core Approaches - 

	1) Database First Approach - 
		When your database already exist. You will convert your database tables into Entities/POCOs [Plain Old CLR Object], Models


	2) Code First Approach - 
		Creating new database along with tables and their relationships from the entities. They can also include constraints

RDBMS - Constraints
	1) Domain Integrity Constraint
		i) Not Null (ii) Check
	2) Entity Integrity Constraint	
		i) Primary Key (ii) Reference Key
	3) Foreign Key Constraint

Relationships - 

	1) One-To-One
		Ex - One Customer will have one subscription
	2) One-To-Many
		Ex - One Customer will have many carts over the period of time
	3) Many-To-Many
		Ex - Many suppliers/dealers will have many shippers
		Ex - Many Employees will have many Teriotries

.NET 6 and EF Core - Entity Framework Packages/Libraries [.DLL] [Nuget Packages]


Database First Approach - 
	1) Connection String to Microsoft SQL Server
		i) Data Source = ServerName
		ii) Initial Catalog = Database Name
		iii) Authentication
			1) Windows Authentication
				Trusted_Connection=true
				TrustServerCertificate=True
			2) SQL Server Authentication
				User Id=sa
				Password=*****

Actual Connection String - 
	For Windows - 
	"Data Source=localhost; Database=BajajECommerceDb;Trusted_Connection=true;TrustServerCertificate=True"

	For SQL Server Authentication - 
	"Data Source=localhost; Database=BajajECommerceDb;Trusted_Connection=true;TrustServerCertificate=True;User Id=sa;Password=*****"

Open Package Manager Console - Tools=> Nuget Package Manager =>Package Manager Console

Scaffold-DbContext [-Connection] [-Provider] [-OutputDir] [-Context] [-Schemas>] [-Tables>] 
                    [-DataAnnotations] [-Force] [-Project] [-StartupProject] [<CommonParameters>]

1) It will generate DbContext with Fluent API using OnModelCreating function of DbContext

Scaffold-DbContext 'Data Source=localhost;Initial Catalog=MyShoeWorldDb;Trusted_Connection=true;TrustServerCertificate=True;' Microsoft.EntityFrameworkCore.SqlServer

2) It will generate DbContext with Data Annotations [Attribute Programming in C#]

Scaffold-DbContext 'Data Source=localhost; Initial Catalog=MyShoeWorldDb;Trusted_Connection=true;TrustServerCertificate=True;' Microsoft.EntityFrameworkCore.SqlServer -DataAnnotations


How to enable logging in DbContext of Entity Framework Core?

protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer("Data Source=localhost;Initial Catalog=MyShoeWorldDb;Trusted_Connection=true;TrustServerCertificate=True;").LogTo(Console.WriteLine);


Code Pen Link - 

https://codepen.io/pravinkumarcode/pen/zYLZwep


Code First Approach - 

	Purchase Order System [Assignment]
	List Of entities/Models/POCOs
		Category [CategoryId - PK], 
		Product [ProductId - PK, CategoryId - FK], 
		Customer [CustomerId - PK], 
		Employee [EmployeeId - PK], 
		Supplier [SupplierId - PK]
		Shipper [ShipperId - PK]
		Order [OrderId - PK, CustomerId - FK, EmployeeId FK, SupplierId - FK], 
		OrderDetail - [OrderDetailId - PK, OrderId - FK, ProductId - FK],  
		Invoice [InvoiceId - PK, OrderId - FK]

	10203 [Harshal]
		OrderDetailId - 1001 - Pizza,
		OrderDetailId - 1002 Burgger
		OrderDetailId - 1003 Coffee

	10204 [Pravin]
		OrderDetailId - 1004 - Pizza,
		OrderDetailId - 1005 Burgger
		OrderDetailId - 1006 Coffee


Entity/Class/Model
	Catgeory
		adding a property with the name - Id
			public int Id { get; set; }
		Or
		adding a property with the name - CategoryId
		        public int CategoryId { get; set; }

	In case, if you want to explicitly assign the Primary key notation on your entity property, you have to use Data annotations
		System.ComponentModel.DataAnnotations


Any changes to entities if you want to reflect to your database tables, you need to add migrations. You can store your migrations into a separate folder with custom name or by default, EF Core will create Migrations folder in which it will add all the migrations.


All migrations are classes and these classes contain two methods - 
	
	Up()

	Down()


Migration Command -

	Add-Migration -name InitialMigration 
	Add-Migration -name InitialMigration -o VetivMigrations

	Update-Database
	or
	Update-Database -Verbose [This flag will show you all the DDL statements while the migrations are getting applied to your database]

To Work with Views and Stored Procedures - 

	1) Add an empty migration with the name - StoredProceduresAndViews
		Add-Migration -name StoredProceduresAndViews
	2) Create Views and Stored Procedures using Raw Sql statements

For Example - CRUD operations using SPs for Customer

	1) GetAllCustomers
	2) GetCustomerDetails @p_CustomerId
	3) InsertCustomer 
	4) UpdateCustomer 
	5) DeleteCustomer @p_CustomerId

Create View for generating an invoice for given InvoiceId














